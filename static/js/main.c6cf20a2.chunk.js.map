{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["random","Math","floor","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","App","state","token","url","getSong","bind","fetch","method","headers","Authorization","then","response","json","data","setState","items","id","_token","access_token","this","className","href","join","title","src","width","height","allowtransparency","allow","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iPAKMA,G,MAASC,KAAKC,MAAsB,GAAhBD,KAAKD,WAIzBG,EAAS,CACb,iBAGIC,EAAOC,OAAOC,SAASF,KAC3BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACP,IAEHL,OAAOC,SAASF,KAAO,G,IAiERU,E,kDA9Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,KACPL,KAAM,GACNM,IAAK,IAGP,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBARH,E,oDAWNH,GAAQ,IAAD,OACbI,MApCyB,2EAoCJ,CACnBC,OAAQ,MACRC,QAAS,CACPC,cAAe,UAAYP,KAG9BQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZjB,KAAMgB,EAAKE,MAAM7B,GAAQ8B,GACzBb,IAAI,wCAAD,OAA0CU,EAAKE,MAAM7B,GAAQ8B,W,0CAMpE,IAAIC,EAAS3B,EAAK4B,aACdD,IACFE,KAAKL,SAAS,CACZZ,MAAOe,IAETE,KAAKf,QAAQa,M,+BAKf,OACE,yBAAKG,UAAU,QACXD,KAAKlB,MAAMC,OACX,6BACE,uBACEkB,UAAU,yBACVC,KAAI,UArEU,yCAqEV,sBAhED,mCAgEC,yBA/DE,iCA+DF,kBAA6EhC,EAAOiC,KAAK,OAAzF,0CAFN,qBAOA,6BACA,oHAIHH,KAAKlB,MAAMC,OACV,4BAAQqB,MAAM,UAAUC,IAAKL,KAAKlB,MAAME,IAAKsB,MAAM,MAAMC,OAAO,MAAMC,kBAAkB,OAAOC,MAAM,yB,GAxD7FC,aCdEC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c6cf20a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\nexport const songsEndpoint = 'https://api.spotify.com/v1/me/top/tracks?limit=50&time_range=medium_term'\n\nconst random = Math.floor(Math.random() * 50);\n\nconst clientId = \"ffe68d14725c4dc5ae6b29eaf45791a0\";\nconst redirectUri = \"http://localhost:3000/callback\";\nconst scopes = [\n  \"user-top-read\"\n];\n\nconst hash = window.location.hash\n .substring(1)\n .split(\"&\")\n .reduce(function(initial, item) {\n   if (item) {\n     var parts = item.split(\"=\");\n     initial[parts[0]] = decodeURIComponent(parts[1]);\n   }\n   return initial;\n}, {});\n  \nwindow.location.hash = \"\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: \"\",\n      url: \"\"\n    };\n\n    this.getSong = this.getSong.bind(this);\n  }\n\n  getSong(token) {\n    fetch(songsEndpoint, {\n      method: 'get',\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    })\n    .then(response => response.json())\n    .then(data => \n      this.setState({ \n        item: data.items[random].id,\n        url: `https://open.spotify.com/embed/track/${data.items[random].id}`,\n      })\n    );\n  }\n\n  componentDidMount() {\n    let _token = hash.access_token;\n    if (_token) {\n      this.setState({\n        token: _token\n      });\n      this.getSong(_token);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.token && (\n          <div>\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}\n            >\n              Login com Spotify\n            </a>\n            \n            <br />\n            <small>* Para visualizar uma de suas 50 músicas mais ouvidas nos últimos 6 meses.</small> \n          </div>\n        )}\n        \n        {this.state.token && (\n          <iframe title=\"Spotify\" src={this.state.url} width=\"300\" height=\"380\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n        )}\n   </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}